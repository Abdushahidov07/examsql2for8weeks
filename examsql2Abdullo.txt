Abdushakhidov Abdullo
-- # EXAM FOR WEEK 8

-- ### Task 1 - CREATE
-- Create tables: Employees, Departments, Locations, Jobs. 
--  - Employees: id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct, department_id.
create table Employees(
	id serial primary key,
	first_name varchar(100),
	last_name varchar(100),
	email varchar(100),
	phone_number varchar(13),
	hire_date date,
	job_id int references Jobs(id) on delete cascade,
	saary numeric(10, 2),
	commision_pct numeric(10, 2),
	department_id int references Departments(id) on delete cascade
)
--  - Departments: id, department_name, manager_name, location_id.
create table Departments(
	id serial primary key,
	department_name varchar(100),
	manager_name varchar(100),
	location_id int unique references Locations(id) on delete cascade
)
--  - Locations: id, city, region, street_address.
create table Locations(
	id serial primary key,
	city varchar(100),
	region varchar(100),
	street_address varchar(100)
)
--  - Jobs: id, title, is_active.
create table Jobs(
	id serial primary key,
	title varchar(100),
	is_active boolean 
)
--  Realationships:
--  - one to one: Departments with Location
--  - one to many: Departments with Employees
--  - one to many: Jobs with Employees


-- ### Task 2 - INSERT
--  - INSEERT 5 JOBS - backend, frontend, fullstack, designer, manager.
insert into JOBS(
	title
)
values
('backend'),
('frontend'),
('fullstack'),
('designer'),
('manager')
--  - INSERT 3 DEPARTMENTS - management, accontant, development
insert into DEPARTMENTS(
	department_name,
	manager_name,
	location_id
)
values
('management', 'Sunatullo', 5),
('accontant', 'Abdullo', 4),
('development', 'Shamsidin', 1)
--  - INSERT 5 LOCATION - any location
insert into Locations(
	city,
	region,
	street_address
)
values
('Dushanbe', 'Firdavsi', 'N.Karaboev'),
('Khugand', 'Hakimi', 'Holi'),
('Dushanbe', 'Sino', 'Selo'),
('Dushanbe', 'Centr', 'Lion'),
('Kulob', 'Halk', 'Kushtepa')
--  - INSERT 10 EMPLOYEES:

insert into EMPLOYEES(
	first_name ,
	last_name ,
	email,
	phone_number,
	hire_date,
	job_id ,
	saary,
	commision_pct,
	department_id 
)
--     - 3 employees must be managers of each department(3 сотрудника должны быть менеджерами каждого отдела)
values
('Abdullo', 'Abdushakidov', 'Abdullo@gmail.com', '+992901309091', '2023-01-20', 5, 50000, 10, 1),
('Tavhid', 'Vohidzoda', 'Tavhid@gmail.com', '+992903445', '2023-05-23', 5, 30000, 12, 2),
('Shamsiddin', 'Arbobzoda', 'Shamsiddin@gmail.com', '+992003340', '2024-11-22', 5, 20000, 13, 3),
--     - 5 employees must be developers (5 сотрудников должны быть разработчиками)
('Akmal', 'Rahimov', 'Akmal@gmail.com', '+9921232435', '2021-02-23', 1, 10002, 10, 3),
('Abubar', 'Husainov', 'Abubar@gmail.com', '+992213o4', '2020-06-01', 2, 20003, 4, 3),
('Alijon', 'Qurbonov', 'Alijon@gmail.com', '+992924552', '2020-02-03', 3, 3000, 14, 3),
('Ahmad', 'Mirzoev', 'Ahmad@gmail.com', '+99293445', '2023-06-02', 1, 10000, 4, 3),
('Muhammad', 'Boronov', 'Muhammad@gmail.com', '+9923245', '2024-11-02', 2, 3000, 2, 3),
--     - 2 сотрудника должны быть из бухгалтерии
('Chori', 'Kobilov', 'Chori@gmail.com', '+99232456', '2023-09-10', 4, 31000, 10, 2),
('Sievush', 'Sobirov', 'Sievush@gmail.com', '+9923245', '2022-12-31', 4, 32000, 11, 2),
('Donier', 'Rahmatov', 'Donier@gmail.com', '+992903322', '2020-01-20', 4, 34000, 20, 2)

-- ### Task 3 ALTER
--     a) Add a column to store employee birthdate (Добавьте столбец для хранения даты рождения сотрудника)
Alter table EMPLOYEES
add date_birthday date
select * from EMPLOYEES
--     b) Change the data type of phone_number in employees to allow more characters (Измените тип данных phone_number в employees, чтобы разрешить больше символов)
alter table EMPLOYEES
add phone_number type varchar(20)
--     c) Rename the commission_pct column to commission_percentage in employees(Переименуйте столбец commission_pct в commission_percentage в employees)
alter table EMPLOYEES
rename column commision_pct to commission_percentage
--     d) Add a unique constraint on the email column in employees if it wasn't defined before (Добавьте уникальное ограничение для столбца email в employees, если оно не было определено ранее)
alter table from EMPLOYEES 
add unique(email)
--     e) Modify the is_active column in the jobs table to default to TRUE (Измените столбец is_active в таблице jobs, чтобы значение по умолчанию было TRUE)
update jobs
set is_active = TRUE

-- ### Task 4 SELECT
--     a) Filter all departments located in 'New York' (Отфильтровать все отделы, расположенные в «Нью-Йорке»)
select * from DEPARTMENTS d join Locations l on l.id = d.location_id where l.city = 'New York'
--     b) Filter all employees hired after January 1, 2022 (Отфильтровать всех сотрудников, нанятых после 1 января 2022 г.)
select * from EMPLOYEES where hire_date = '2022-01-01'
--     c) Filter employees whose email ends with '@example.com' (Отфильтровать сотрудников, чей адрес электронной почты заканчивается на «@example.com»)
select * from EMPLOYEES where email like '%@example.com'
--     d) Filter jobs where the title contains the word 'Manager' (Отфильтровать вакансии, в названии которых содержится слово «Менеджер»)
select * from Jobs where title = 'Manager'
--     e) Filter employees who do not belong to the departments with ids 2 and 4 (Отфильтровать сотрудников, которые не относятся к отделам с идентификаторами 2 и 4)
select * from EMPLOYEES where department_id != 2 and department_id != 4
--     f) Filter employees with a salary between 4000 and 8000 (Отфильтровать сотрудников с зарплатой от 4000 до 8000)
select * from EMPLOYEES where saary between 4000 and 8000

-- ### Task 5 JOIN
--     a) Retrieve all employees along with their department names (Получить всех сотрудников вместе с названиями их отделов)
select 	e.first_name,e.last_name ,e.email,e.phone_number,e.hire_date,e.job_id ,e.saary, e.commission_percentage, d.department_name from EMPLOYEES e
join DEPARTMENTS d on d.id = e.department_id
--     b) Retrieve all employees, their department names, and the location city (Получить всех сотрудников, названия их отделов и город расположения)
select 	e.first_name,e.last_name ,e.email,e.phone_number,e.hire_date,e.job_id ,e.saary, e.commission_percentage, d.department_name, l.city from EMPLOYEES e
join DEPARTMENTS d on d.id = e.department_id
join Locations l on l.id = d.location_id
--     d) Retrieve all departments and their managers' names (include departments without managers) (Получить все отделы и имена их менеджеров (включая отделы без менеджеров))
select * from DEPARTMENTS
--     e) Retrieve all employees and their departmentsal, including employees without departments and departments without employees (Получить всех сотрудников и их отделы, включая сотрудников без отделов и отделы без сотрудников)
select 	e.first_name,e.last_name ,e.email,e.phone_number,e.hire_date,e.job_id ,e.saary, e.commission_percentage, d.department_name from EMPLOYEES e
full join DEPARTMENTS d on d.id = e.department_id
--     f) Retrieve employees who work in the 'Sales' department along with their job titles (Получить сотрудников, которые работают в отделе «Продажи», вместе с их должностями)
select 	e.first_name,e.last_name ,e.email,e.phone_number,e.hire_date,e.job_id ,e.saary, e.commission_percentage, d.department_name from EMPLOYEES e
join DEPARTMENTS d on d.id = e.department_id
where d.department_name = 'Sales'
--     g) Retrieve the number of employees in each department (Получить количество сотрудников в каждом отделе)
select d.department_name, count(e.department_id) from DEPARTMENTS d
join EMPLOYEES e on e.department_id = d.id
group by d.id 
--     h) Retrieve employees whose salary is higher than the average salary of their department (Получить сотрудников, чья зарплата выше средней зарплаты их отдела)
select 	e.first_name,e.last_name ,e.email,e.phone_number,e.hire_date,e.job_id ,e.saary, e.commission_percentage, d.department_name from EMPLOYEES e
join DEPARTMENTS d on d.id = e.department_id
where e.saary > (select avg(e.saary) from DEPARTMENTS d
join EMPLOYEES e on e.department_id = d.id )
